/* Como via_terrestre_(a,b,4) eh igual a via_terrestre(b,a,4)   *
 * criei este predicado para me auxiliar                        */
vt(X, Y, Z):-via_terrestre(X, Y, Z).
vt(X, Y, Z):-via_terrestre(Y, X, Z).
va(X, Y, Z):-via_aerea(X, Y, Z).
va(X, Y, Z):-via_aerea(Y, X, Z).

via_terrestre(a,b,4).
via_terrestre(b,e,6).
via_terrestre(a,c,23).
via_terrestre(a,g,13).
via_terrestre(c,d,54).
via_terrestre(d,e,30).
via_terrestre(e,f,17).
via_terrestre(f,g,45).
via_terrestre(j,k,75).
via_terrestre(j,l,75).
via_terrestre(k,h,75).
via_terrestre(k,i,211).
via_terrestre(i,h,142).
via_terrestre(m,n,101).
via_terrestre(m,o,138).
via_terrestre(m,r,17).
via_terrestre(n,o,23).
via_terrestre(r,q,23).
via_terrestre(q,p,15).
via_terrestre(p,o,12).
via_aerea(e, j, 3).
via_aerea(e, m, 87).
via_aerea(j, m, 9).

/***************************************************************************/
% subcultura
subcultura([],[]).

subcultura([T|Lista],Atual_Alta) :-
        subcultura(Lista,Atual_Baixa),
        insere(T,Atual_Baixa,Atual_Alta).

% insere
insere(X,[],[X]).

insere(X,[S|Subs],FINAL) :-
        intersecao(X,S),
        uniao(X,S,NovaSub),
        insere(NovaSub,Subs,FINAL).

insere(X,[S|Subs],[S|FINAL]) :-
        insere(X,Subs,FINAL).

% uniao
uniao([],L,L).

uniao([X|Cauda],L,[X|Result]):-
        not(pertence_a(X,L)),
        uniao(Cauda,L,Result).

uniao([_|Cauda],L,Result):-
        uniao(Cauda,L,Result).

% intersecao
intersecao([X|_],L):-
        pertence_a(X,L).
intersecao([_|Cauda],L):-
        intersecao(Cauda,L).

% pertence_a
pertence_a(X, [X|_]).

pertence_a(X,[_|Cauda]):-
        pertence_a(X,Cauda).

% concatena
concatena([], L, L).
concatena([X|Cauda1],L2,[X|Cauda3]):-
        concatena(Cauda1,L2,Cauda3).


/***************************************************************************/


% caminho
caminho(Vertice_i, Vertice, Caminho):-
  dijkstra(Vertice_i, Estruturas),
  member(e(Vertice, _, Caminho), Estruturas), !.

caminho(Vertice_i, Vertice, Caminho):-
  findall(A,vt(A,_,_),Lt),
  pertence_a(Vertice_i, Lt),
  pertence_a(Vertice,Lt),
  findall([C1,C2],via_terrestre(C1,C2,_),L1),
  subcultura(L1,L),
  caminho2(Vertice_i, Vertice, L, Aero_i, Aero),

  dijkstra(Vertice_i, E1),
  member(e(Aero_i, _, Cam1), E1),

  dijkstra(Aero, E2),
  member(e(Vertice, _, Cam2), E2),

  concatena(Cam1, Cam2, Caminho), !.

caminho2(Vertice_i, Vertice, Subculturas, Aeroporto_i, Aeroporto):-
  procura_aero(Vertice_i, Subculturas, Aeroporto_i),
  procura_aero(Vertice, Subculturas, Aeroporto).

procura_aero(V, [Sub|_], A):-
  pertence_a(V,Sub),
  va(A,_,_),
  pertence_a(A,Sub).
procura_aero(V,[_|Subs],A):-
  procura_aero(V,Subs,A).
procura_aero(_,[],_):- !,fail.

% dijkstra(Vertice_i, Estruturas)
% Estruturas serao uma lista de estruturas e(Vertice, Dist, Cam), contendo o menor
% caminho entre Vertice_i e Vertice
dijkstra(Vertice, Estruturas):-
  criar_estruturas(Vertice, [Vertice], L),
  dijkstra_1(L, [e(Vertice, 0, [Vertice])], Estruturas).

dijkstra_1([], Estruturas, Estruturas).
dijkstra_1([D|L], Estruturas0, Estruturas):-
  melhor(L, D, E),
  apagar([D|L], [E], L1),
  E = e(Vertice, Distancia, Caminho),
  reverse([Vertice|Caminho], Caminho1),
  juntar_estruturas(Estruturas0, [e(Vertice, Distancia, Caminho1)], Estruturas1),
  criar_estruturas(Vertice, [Vertice|Caminho], L2),
  apagar(L2, Estruturas1, L3),
  relaxacao(L3, Distancia, L4),
  juntar_estruturas(L1, L4, L5),
  dijkstra_1(L5, Estruturas1, Estruturas).

% criar_estruturas(Inicial, Caminho, L)
% L sera uma lista de estruturas e(Vert, Dist, Cam), para cada vertice vizinho de Inicial
criar_estruturas(Inicial, Caminho, L):-
  setof(e(Vertice,D,Caminho), vt(Inicial,Vertice,D), L),
  !.
criar_estruturas(_, _, []).

% melhor(L, D0, D)
% D sera a estrutura e(V, D, C) com a menor distancia
melhor([], Melhor, Melhor).
melhor([D|L], Melhor0, Melhor):-
  menor(D, Melhor0), !,
  melhor(L, D, Melhor).
melhor([_|L], Melhor0, Melhor):-
  melhor(L, Melhor0, Melhor).

% menor
menor(e(_, X, _), e(_, Y, _)):-X < Y.

% apagar(L1, L2, L3)
% L3 tera os elementos de L1 apagando os elementos iguais ao de L2
apagar([], _, []).
apagar([X|L1], [], [X|L1]):-!.
apagar([X|L1], [Y|L2], L3):-
  igual(X, Y), !,
  apagar(L1, L2, L3).
apagar([X|L1], [Y|L2], [X|L3]):-
  menor_que(X, Y), !, apagar(L1, [Y|L2], L3).
apagar([X|L1], [_|L2], L3):-
  apagar([X|L1], L2, L3).

% juntar_estruturas(L1, L2, L3)
% junta em L3 as estruturas de L1 com as de L2
% se L1 e L2 tem estruturas do mesmo vertice, a que tiver menor distancia estara em L3
juntar_estruturas([], L2, L2).
juntar_estruturas([X|L1], [], [X|L1]):-!.
juntar_estruturas([X|L1], [Y|L2], [X|L3]):-
  igual(X, Y), menor(X, Y), !,
  juntar_estruturas(L1, L2, L3).
juntar_estruturas([X|L1], [Y|L2], [Y|L3]):-
  igual(X, Y), !,
  juntar_estruturas(L1, L2, L3).
juntar_estruturas([X|L1], [Y|L2], [X|L3]):-
  menor_que(X, Y), !,
  juntar_estruturas(L1, [Y|L2], L3).
juntar_estruturas([X|L1], [Y|L2], [Y|L3]):-
  juntar_estruturas([X|L1], L2, L3).

igual(e(X, _, _), e(X, _, _)).

menor_que(e(X, _, _), e(Y, _, _)):-X @< Y.

% relaxacao(L1, Incr, L2)
% promove uma rodada de relaxacao
relaxacao([], _, []).
relaxacao([e(V, D1, C)|L1], Incr, [e(V, D2, C)|L2]):-
  D2 is D1 + Incr,
  relaxacao(L1, Incr, L2).

instrucoes:-
        nl,nl,
        write('=====>>>> Trabalho feito em SWI-Prolog <<<<====='),nl,
        write('Modo de uso caminho(cidade_a,cidade_b,Caminho)'),
        nl,nl,nl.

?- instrucoes.
